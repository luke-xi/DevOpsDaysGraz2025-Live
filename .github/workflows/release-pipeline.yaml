name: Release Pipeline

on:
  push: {}
  workflow_dispatch:
    inputs:
      version: 
        description: Name or version
        required: true
        type: string

jobs:
  release-pipeline:
    name: Release Pipeline\
    runs-on: windows-latest
    env:
      CERT_NAME: cert.pfx

    steps:
      - name: Hello Pipeline
        run: echo "Hello Pipeline ... lolz!  ... starting now ..."

      - uses: actions/checkout@v4

      - name: Setup Dotnet tools
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run Core.Test
        run: dotnet test .\src\DevOpsDaysTasks.Core.Tests

      - name: Run Integration Tests
        run: dotnet test .\src\DevOpsDaysTasks.IntegrationTests

      # Problem: Hardcoded version
      # could use git tags or github input (in our case we will use input i guess)
      - name: Build Release version
        env:
          VERSION: ${{ inputs.version || '0.0.0' }}
        run: dotnet publish -c Release src\DevOpsDaysTasks.UI\ -o DevOpsDaysTasks /p:Version=${{ env.VERSION }} /p:VersionName=Banana

      # Problem: We do not want to use the workshop folder
      - name: Chechout external files
        uses: actions/checkout@v4
        with:
          repository: martinzimmermann/DevOpsDaysGraz2025-ExternalFiles
          path: ExternalFiles

      # we used .\workshop_material\ExternalFiles\default-tasks.xml here but replaced it with the checkout above
      - name: Copy default-tasks.xml
        run: |
          mkdir DevOpsDaysTasks\Templates
          copy ExternalFiles\default-tasks.xml .\DevOpsDaysTasks\Templates\

      - name: Copy Help.pdf
        run: |
          mkdir DevOpsDaysTasks\Help
          copy ExternalFiles\Help.pdf .\DevOpsDaysTasks\Help\

      # Problem: Cert and Password
      # use secrets in github under settings > secrets and variables > actions
      # not files but only strings can be stored

      # first create the base64 certificate file and convert it 
      - name: Create Cert
        run: |
          $base64 = "${{ secrets.SIGN_CERTIFICATE_PFX_BASE64 }}"
          $content = [System.Convert]::FromBase64String($base64)
          Set-Content ${{ env.CERT_NAME }} -Value $content -AsByteStream

      - name: Sign Release
        run: .\scripts\sign.ps1 .\DevOpsDaysTasks\DevOpsDaysTasks.UI.exe -PfxFile ${{ env.CERT_NAME }} -PfxPassword ${{ secrets.CERTIFICATE_PASSWORD }}

      # We do not have a release
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          path: DevOpsDaysTasks
          name: DevOpsDaysTasks
  
      # Release only if input.verision is set (in github ui with manual workflow trigger)
      # Create ZIP
      - name: Create ZIP
        run: Compress-Archive -Path DevOpsDaysTasks -DestinationPath DevOpsDaysTasks.zip

      - name: Github Release
        uses: softprops/action-gh-release@v2
        if: ${{ input.version }}
        with:
          name: DevOpsDaysTasks
          tag_name: ${{ input.version }}
          files: DevOpsDaysTasks.zip

# infos from here in terms of release? https://github.com/marketplace/actions/github-release
# name: Publish Release
# on:
#   push:
#     tags:
#       - 'v*'
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#     - uses: actions/checkout@v3
#     - name: Create a Release
#       uses: elgohr/Github-Release-Action@v5
#       env:
#         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         title: MyReleaseMessage
  
        # run: |
        #   echo: "sers"
        #   echo: "du Wappler"